/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BookRequest
 */
export interface BookRequest {
    /**
     * 
     * @type {string}
     * @memberof BookRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BookRequest
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof BookRequest
     */
    'series'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookRequest
     */
    'sequenceNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookRequest
     */
    'language': string;
    /**
     * 
     * @type {string}
     * @memberof BookRequest
     */
    'isbn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookRequest
     */
    'collection': BookRequestCollectionEnum;
}

export const BookRequestCollectionEnum = {
    Library: 'LIBRARY',
    Wishlist: 'WISHLIST'
} as const;

export type BookRequestCollectionEnum = typeof BookRequestCollectionEnum[keyof typeof BookRequestCollectionEnum];

/**
 * 
 * @export
 * @interface BookResponse
 */
export interface BookResponse {
    /**
     * 
     * @type {number}
     * @memberof BookResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BookResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BookResponse
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BookResponse
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof BookResponse
     */
    'series'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookResponse
     */
    'sequenceNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookResponse
     */
    'language': string;
    /**
     * 
     * @type {string}
     * @memberof BookResponse
     */
    'isbn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponse
     */
    'collection': BookResponseCollectionEnum;
}

export const BookResponseCollectionEnum = {
    Library: 'LIBRARY',
    Wishlist: 'WISHLIST'
} as const;

export type BookResponseCollectionEnum = typeof BookResponseCollectionEnum[keyof typeof BookResponseCollectionEnum];


/**
 * BookControllerApi - axios parameter creator
 * @export
 */
export const BookControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new book
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBook: async (bookRequest: BookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookRequest' is not null or undefined
            assertParamExists('addBook', 'bookRequest', bookRequest)
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBook', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all books for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBookById', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a book by its ID
         * @param {number} id 
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook: async (id: number, bookRequest: BookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBook', 'id', id)
            // verify required parameter 'bookRequest' is not null or undefined
            assertParamExists('updateBook', 'bookRequest', bookRequest)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookControllerApi - functional programming interface
 * @export
 */
export const BookControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new book
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBook(bookRequest: BookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBook(bookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.addBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBook(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBook(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.deleteBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all books for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBooks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBooks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.getAllBooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.getBookById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a book by its ID
         * @param {number} id 
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBook(id: number, bookRequest: BookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBook(id, bookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.updateBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookControllerApi - factory interface
 * @export
 */
export const BookControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new book
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBook(bookRequest: BookRequest, options?: RawAxiosRequestConfig): AxiosPromise<BookResponse> {
            return localVarFp.addBook(bookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBook(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all books for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooks(options?: RawAxiosRequestConfig): AxiosPromise<Array<BookResponse>> {
            return localVarFp.getAllBooks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<BookResponse> {
            return localVarFp.getBookById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a book by its ID
         * @param {number} id 
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook(id: number, bookRequest: BookRequest, options?: RawAxiosRequestConfig): AxiosPromise<BookResponse> {
            return localVarFp.updateBook(id, bookRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookControllerApi - object-oriented interface
 * @export
 * @class BookControllerApi
 * @extends {BaseAPI}
 */
export class BookControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add a new book
     * @param {BookRequest} bookRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public addBook(bookRequest: BookRequest, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).addBook(bookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a book by its ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public deleteBook(id: number, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).deleteBook(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all books for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public getAllBooks(options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).getAllBooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a book by its ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public getBookById(id: number, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).getBookById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a book by its ID
     * @param {number} id 
     * @param {BookRequest} bookRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public updateBook(id: number, bookRequest: BookRequest, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).updateBook(id, bookRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestAuthControllerApi - axios parameter creator
 * @export
 */
export const TestAuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Test authentication and return authentication details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAuth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/test-auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestAuthControllerApi - functional programming interface
 * @export
 */
export const TestAuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestAuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Test authentication and return authentication details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testAuth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testAuth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestAuthControllerApi.testAuth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestAuthControllerApi - factory interface
 * @export
 */
export const TestAuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestAuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Test authentication and return authentication details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAuth(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.testAuth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestAuthControllerApi - object-oriented interface
 * @export
 * @class TestAuthControllerApi
 * @extends {BaseAPI}
 */
export class TestAuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary Test authentication and return authentication details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestAuthControllerApi
     */
    public testAuth(options?: RawAxiosRequestConfig) {
        return TestAuthControllerApiFp(this.configuration).testAuth(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteUser(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).deleteUser(options).then((request) => request(this.axios, this.basePath));
    }
}



